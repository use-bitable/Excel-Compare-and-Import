let u=null;async function y(){const a=await import("./xlsx-H25jJLym.js"),n=await import("./cpexcel.full-DycoA3W8.js");return a.set_cptable(n),a}async function X(a,n,i={}){const{onError:e=null}=i;try{u||(u=await y());const r=u.read(a,{type:"buffer",raw:!0,codepage:65001}),l=r.SheetNames.map(t=>{var m;const p=r.Sheets[t],s=u.utils.sheet_to_json(p,{header:1,raw:!1});if(s.length<=1)return null;try{const d=(m=s[0])==null?void 0:m.map(o=>({name:String(o)})),f=s.slice(1).map(o=>{const c={};return o.forEach((g,h)=>{c[d[h].name]=g!==null?String(g):null}),c}).filter(o=>Object.values(o).some(c=>c!==null));return f.length?{name:t,tableData:{fields:d,records:f}}:null}catch{return e&&e({message:"message.sheetError",payload:{sheetName:t}}),null}}).filter(t=>t!==null);return l.length===0?(e&&e({message:"message.noSheet"}),null):{sheets:l,name:n}}catch(r){return e&&e({message:"message.fileError",error:r}),null}}onmessage=async function(a){const{data:n}=a,{type:i,payload:e}=n;if(i==="readXLSX"){const{data:r,name:l}=e,t=await X(r,l,{onError:({message:p,payload:s})=>postMessage({type:"error",payload:{message:p,payload:s}})});postMessage({type:"readXLSX",payload:t})}};
